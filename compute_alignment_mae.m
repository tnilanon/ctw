function mae = compute_alignment_mae(alignment, indice_a, indice_b, column_idx_a, column_idx_b)

mae_begin = mean([ ...
    min(abs(alignment.P(alignment.P(:, column_idx_a) == indice_a.index_begin, column_idx_b) - indice_b.index_begin)), ...
    min(abs(alignment.P(alignment.P(:, column_idx_b) == indice_b.index_begin, column_idx_a) - indice_a.index_begin)) ...
    ]);
mae_subtask_2 = mean([ ...
    min(abs(alignment.P(alignment.P(:, column_idx_a) == indice_a.index_subtask_2, column_idx_b) - indice_b.index_subtask_2)), ...
    min(abs(alignment.P(alignment.P(:, column_idx_b) == indice_b.index_subtask_2, column_idx_a) - indice_a.index_subtask_2)) ...
    ]);
mae_subtask_3 = mean([ ...
    min(abs(alignment.P(alignment.P(:, column_idx_a) == indice_a.index_subtask_3, column_idx_b) - indice_b.index_subtask_3)), ...
    min(abs(alignment.P(alignment.P(:, column_idx_b) == indice_b.index_subtask_3, column_idx_a) - indice_a.index_subtask_3)) ...
    ]);
mae_end = mean([ ...
    min(abs(alignment.P(alignment.P(:, column_idx_a) == indice_a.index_end, column_idx_b) - indice_b.index_end)), ...
    min(abs(alignment.P(alignment.P(:, column_idx_b) == indice_b.index_end, column_idx_a) - indice_a.index_end)) ...
    ]);

mae = struct( ...
    'begin', mae_begin, ...
    'subtask_2', mae_subtask_2, ...
    'subtask_3', mae_subtask_3, ...
    'end', mae_end ...
    );

